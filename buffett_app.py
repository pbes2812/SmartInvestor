import streamlit as st
import openai
import yfinance as yf
import os
import pandas as pd

client = openai.OpenAI(api_key=os.environ.get("OPENAI_API_KEY"))

st.set_page_config(page_title="SmartInvestor v6.1", layout="centered")
st.title("üìà SmartInvestor ‚Äì Buffett-analyse med ticker-s√∏gning og vurdering")

# üìò Indl√¶s virksomhedsliste til dropdown
@st.cache_data
def load_company_data():
    df = pd.read_csv("company_dropdown_list.csv")
    return df

df_lookup = load_company_data()

# üìå Dropdown med virksomhedsnavne
valgt_selskab = st.selectbox("üìä V√¶lg virksomhed", df_lookup["DropdownOption"])
valgt_ticker = df_lookup[df_lookup["DropdownOption"] == valgt_selskab]["Ticker"].values[0]

k√∏bspris = st.number_input("üí∞ Din k√∏bspris (valgfri)", min_value=0.0, step=0.1, format="%.2f")

prompt = st.text_area("‚úèÔ∏è Hvad vil du gerne have GPT til at vurdere?",
                      "Er denne aktie undervurderet, og b√∏r jeg s√¶lge eller holde ud fra min k√∏bspris?")

st.caption("‚ÑπÔ∏è Brug tekstfeltet til at specificere din analyse ‚Äì fx: 'Vurder langsigtet potentiale', "
           "'Vurder om den er undervurderet ift. intrinsic value', eller 'Hvordan klarer den sig mod konkurrenter?'")

# üìä Datahentning
def hent_noegletal(ticker):
    try:
        aktie = yf.Ticker(ticker)
        info = aktie.info
        pe_ratio = info.get("trailingPE", "Ukendt")
        roe = info.get("returnOnEquity", "Ukendt")
        fcf = info.get("freeCashflow", None)
        eps = info.get("trailingEps", None)
        pris = info.get("currentPrice", "Ukendt")
        g√¶ld = info.get("totalDebt", "Ukendt")
        valuta = info.get("financialCurrency", "Ukendt")

        v√¶kstrate = 0.08
        diskonteringsrente = 0.10
        intrinsic_value = None
        if eps and isinstance(eps, (int, float)):
            intrinsic_value = round(eps * (1 + v√¶kstrate) / (diskonteringsrente - v√¶kstrate), 2)

        # Dummy moat score
        moat_score = 2 if roe and roe > 0.15 else 1 if roe and roe > 0.08 else 0

        return {
            "Ticker": ticker,
            "P/E": pe_ratio,
            "ROIC": roe,
            "Free Cash Flow": fcf,
            "Debt": g√¶ld,
            "Current Price": pris,
            "Estimated Intrinsic Value (DCF)": intrinsic_value,
            "Currency": valuta,
            "Moat Score (0‚Äì2)": moat_score,
            "Stable?": "Yes" if fcf and fcf > 0 else "No"
        }
    except Exception as e:
        return {"Fejl": str(e)}

# üöÄ Analyseknap
if st.button("üöÄ Find ud af om aktien er v√¶rd at eje"):
    if valgt_ticker:
        noegletal = hent_noegletal(valgt_ticker)
        st.subheader("üìä N√∏gletal hentet fra Yahoo Finance")
        st.json(noegletal)

        fakta_tekst = "\n".join([f"{k}: {v}" for k, v in noegletal.items()])
        k√∏bspris_tekst = f"Brugerens k√∏bspris er: {k√∏bspris}" if k√∏bspris > 0 else "Ingen k√∏bspris angivet."

        messages = [
            {"role": "system", "content": (
                "Du er en professionel investeringsr√•dgiver, der arbejder ud fra Warren Buffetts principper. "
                "Brug de n√∏gletal, du har f√•et herunder ‚Äì og henvis til dem i analysen, s√• brugeren f√•r tillid til vurderingen. "
                "Kom ogs√• med en konklusion baseret p√• intrinsic value og brugerens k√∏bspris."
                f"\n\nN√∏gletal:\n{fakta_tekst}\n{k√∏bspris_tekst}")},
            {"role": "user", "content": f"Ticker: {valgt_ticker}\n{prompt}"}
        ]

        with st.spinner("GPT analyserer baseret p√• dine data..."):
            try:
                response = client.chat.completions.create(
                    model="gpt-4",
                    messages=messages,
                    temperature=0.3,
                )
                st.success("‚úÖ Analyse f√¶rdig")
                st.markdown(response.choices[0].message.content)
            except Exception as e:
                st.error(f"Fejl under GPT-analyse: {e}")
    else:
        st.warning("Du skal v√¶lge en virksomhed.")

